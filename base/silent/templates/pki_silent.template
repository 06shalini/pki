#!/bin/bash
##  BEGIN COPYRIGHT BLOCK
##  (C) 2009 Red Hat, Inc.
##  All rights reserved.
##  END COPYRIGHT BLOCK


##  Always switch into this base directory
##  prior to script execution so that all
##  of its output is written to this directory

cd `dirname $0`


##  Disallow script to be run as the name of this template
pki_silent_script=`basename $0`
if	[ "${pki_silent_script}" = "pki_silent.template" ] ; then
	printf "\n"
	printf "Usage:  (1) Install AND configure a directory server instance.\n\n"
	printf "        (2) Install, but do NOT configure ALL six\n"
	printf "            'default' PKI subsystem instances.\n\n"
	printf "        (3) Copy '$0' to a new script name\n"
	printf "            without the '.template' extension.\n"
	printf "            (e .g. - 'configure_default_pki_instances')\n\n"
	printf "        (4) Fill in all MANDATORY user-defined variables\n"
	printf "            in the new script.\n\n"
	printf "        (5) Change any OPTIONAL user-defined variables\n"
	printf "            in the new script as desired.\n\n"
	printf "        (6) Become the 'root' user, and execute the new script to\n"
	printf "            configure ALL six 'default' PKI subsystem instances.\n\n"
	exit 255
fi


##
##  This script MUST be run as root!
##

ROOTUID=0

OS=`uname`
if [ "${OS}" = "Linux" ] ; then
	MY_EUID=`/usr/bin/id -u`
	MY_UID=`/usr/bin/id -ur`
	USERNAME=`/usr/bin/id -un`
else
	printf "ERROR:  Unsupported operating system '${OS}'!\n"
	exit 255
fi

if	[ "${MY_UID}"  != "${ROOTUID}" ] &&
	[ "${MY_EUID}" != "${ROOTUID}" ] ; then
	printf "ERROR:  The '$0' script must be run as root!\n"
	exit 255
fi

if  [ -z "${HOME}" ]; then
	printf "ERROR:  The 'HOME' environment variable must be set!\n"
	exit 255
fi


##############################################################################
##############################################################################
##                                                                          ##
##  P K I   S I L E N T  -  V A R I A B L E   D E C L A R A T I O N         ##
##                                                                          ##
##############################################################################
##############################################################################

##############################################################################
##  U S E R - D E F I N E D   V A R I A B L E S   ( M A N D A T O R Y )     ##
##############################################################################

##
##  IMPORTANT:  'Escape' ALL spaces in EACH variable specified below!
##
##              For Example:
##
##                  pki_security_domain_name="My\ Security\ Domain"
##

##  PKI Silent Security Database Variables
##  (e. g. - PKI Silent "browser" database)
pki_silent_security_database_repository="${HOME}/.dogtag/certs"
pki_silent_security_database_password=

##  PKI Security Domain Variables
##  (e. g. - Security Domain Login Panel)
pki_security_domain_name=
pki_security_domain_host=`hostname`
pki_security_domain_admin_name=admin
pki_security_domain_admin_password=

##  PKI Instance-Specific Token Variables
##  (e. g. - Module Panel)
ra_token_name=internal
ra_token_password=

##  PKI Email Variables
##
##      For example, to specify 'pkitest@example.com':
##
##          pki_email_name=pkitest
##          pki_email_company=example
##          pki_email_domain=com
##
pki_email_name=
pki_email_company=
pki_email_domain=

##  PKI Silent Admin Variables
##  (e. g. - Import Admin Certificate into PKI Silent "browser" database)
pki_silent_admin_user=admin
pki_silent_admin_password=
pki_silent_admin_email="${pki_email_name}\@${pki_email_company}\.${pki_email_domain}"



##############################################################################
##  P R E - D E F I N E D   " D E F A U L T "   V A R I A B L E S           ##
##############################################################################

##  PKI Subsystem Host (computed by default)
pki_host=`hostname`

##  PKI Subsystem Names
ra_subsystem_name="Registration\ Authority"

##  PKI Subsystem Instance Names
ra_instance_name="pki-ra"

##  PKI Subsystem Init Script Names
ra_init_script="pki-rad"

## CA ports
ca_nonssl_port=8080
ca_agent_port=8443
ca_ee_port=8443
ca_admin_port=8443

## RA ports
ra_nonssl_port=12888
ra_clientauth_port=12889
ra_nonclientauth_port=12890



##############################################################################
##  U S E R - D E F I N E D   V A R I A B L E S   ( O P T I O N A L )       ##
##############################################################################

##  PKI Silent Log Files
pki_silent_ra_log=/tmp/ra.log


##  Miscellaneous RA Variables
##
##  REMINDER:  'Escape' ALL spaces in EACH variable specified below!
##
##  NOTE:  For comparison's sake, if the default instances were manually
##         configured using a Firefox browser, the content of the corresponding
##         "/var/lib/${ra_instance_name}/alias/" security libraries would be
##         something similar to this:
##
##             Certificate Nickname                         Trust Attributes
##                                                          SSL,S/MIME,JAR/XPI
##
##             subsystemCert cert-${ra_instance_name}         u,u,u
##             caCert                                       CT,C,C
##             Server-Cert cert-${ra_instance_name}           u,u,u
##
##         where:
##
##                 Nickname:  "subsystemCert cert-${ra_instance_name}"
##             Subject Name:  "cn=RA Subsystem Certificate,"
##                         +  "ou=${ra_instance_name},"
##                         +  "o=${pki_security_domain_name}"
##
##                 Nickname:  "caCert"
##             Subject Name:  "cn=Certificate Authority,"
##                         +  "o=${pki_security_domain_name}"
##
##                 Nickname:  "Server-Cert cert-${ra_instance_name}"
##             Subject Name:  "cn=${pki_host},"
##                         +  "ou=${ra_instance_name},"
##                         +  "o=${pki_security_domain_name}"
##

ra_chosen_ca_hostname=${pki_security_domain_host}
ra_chosen_ca_nonssl_port=${ca_nonssl_port}
ra_chosen_ca_ssl_port=${ca_ee_port}
ra_chosen_ca_admin_port=${ca_admin_port}
ra_agent_name="RA\ Administrator\'s\ ${pki_security_domain_name}\ ID"
ra_agent_key_size=2048
ra_agent_key_type=rsa
ra_agent_cert_subject="cn=RA\ Administrator,uid=admin,e=${pki_silent_admin_email},o=${pki_security_domain_name}"
ra_key_size=2048
ra_key_type=rsa
ra_server_cert_nickname="Server-Cert\ cert-${ra_instance_name}"
ra_server_cert_subject_name="cn=${pki_host},ou=${ra_instance_name},o=${pki_security_domain_name}"
ra_subsystem_cert_nickname="subsystemCert\ cert-${ra_instance_name}"
ra_subsystem_cert_subject_name="cn=RA\ Subsystem\ Certificate,ou=${ra_instance_name},o=${pki_security_domain_name}"



##############################################################################
##############################################################################
##                                                                          ##
##  P K I   S I L E N T  -  S U B S Y S T E M   C O N F I G U R A T I O N   ##
##                                                                          ##
##############################################################################
##############################################################################

##############################################################################
##  P K I   S I L E N T   I N I T I A L I Z A T I O N                       ##
##############################################################################

## (1) Make certain that user has defined all MANDATORY user-defined variables!
usage_errors=0
usage_error_preamble="ERROR:  User MUST define a value for"

if [ "${pki_silent_security_database_password}" = "" ] ; then
	printf "${usage_error_preamble} 'pki_silent_security_database_password'!\n"
	usage_errors=`expr ${usage_errors} + 1`
fi
if [ "${pki_security_domain_name}" = "" ] ; then
	printf "${usage_error_preamble} 'pki_security_domain_name'!\n"
	usage_errors=`expr ${usage_errors} + 1`
fi
if [ "${pki_security_domain_admin_password}" = "" ] ; then
	printf "${usage_error_preamble} 'pki_security_domain_admin_password'!\n"
	usage_errors=`expr ${usage_errors} + 1`
fi
if [ "${ra_token_password}" = "" ] ; then
	printf "${usage_error_preamble} 'ra_token_password'!\n"
	usage_errors=`expr ${usage_errors} + 1`
fi
if [ "${pki_email_name}" = "" ] ; then
	printf "${usage_error_preamble} 'pki_email_name'!\n"
	usage_errors=`expr ${usage_errors} + 1`
fi
if [ "${pki_email_company}" = "" ] ; then
	printf "${usage_error_preamble} 'pki_email_company'!\n"
	usage_errors=`expr ${usage_errors} + 1`
fi
if [ "${pki_email_domain}" = "" ] ; then
	printf "${usage_error_preamble} 'pki_email_domain'!\n"
	usage_errors=`expr ${usage_errors} + 1`
fi
if [ "${pki_silent_admin_password}" = "" ] ; then
	printf "${usage_error_preamble} 'pki_silent_admin_password'!\n"
	usage_errors=`expr ${usage_errors} + 1`
fi


## (2) Make certain that a PKI instance of the specified name EXISTS,
##     but has NOT been previously CONFIGURED!
existence_errors=0
existence_error_preamble="ERROR:  No PKI Instance named"
configuration_errors=0
configuration_error_preamble="ERROR:  A PKI Instance named"
configuration_error_postamble="EXISTS,\n        but has PREVIOUSLY been CONFIGURED!"

if [ ! -f "/var/lib/${ra_instance_name}/conf/CS.cfg" ] ; then
	printf "${existence_error_preamble} '${ra_instance_name}' EXISTS!\n"
	existence_errors=`expr ${existence_errors} + 1`
else
	ra_configuration_check=`grep -c preop /var/lib/${ra_instance_name}/conf/CS.cfg`
	if [ ${ra_configuration_check} -eq 0 ] ; then
	    printf "${configuration_error_preamble} '${ra_instance_name}' "
		printf "${configuration_error_postamble}\n"
		configuration_errors=`expr ${configuration_errors} + 1`
	fi
fi


if	[ ${usage_errors} -ne 0 ]     ||
	[ ${existence_errors} -ne 0 ] ||
	[ ${configuration_errors} -ne 0 ] ; then
	printf "\n"
	printf "Please correct ALL errors listed above and re-run\n"
	printf "the '$0' script!\n\n"
	exit 255
fi


## (3) Make certain that 'pkisilent' exists and is executable on this system.
if [ ! -x "/usr/bin/pkisilent" ] ; then
	printf "\n"
	printf "ERROR:  Please install the 'pki-server' package and re-run\n"
	printf "the '$0' script!\n\n"
	exit 255
fi


## (4) Check for old PKI Silent Security Databases, but DO NOT remove them!
##     Instead, inform the user and exit this script.
if	[ -f "${pki_silent_security_database_repository}/cert8.db" ] ||
	[ -f "${pki_silent_security_database_repository}/key3.db" ] ||
	[ -f "${pki_silent_security_database_repository}/secmod.db" ] ; then
	printf "\n"
	printf "WARNING:  At least one of the security databases\n"
	printf "          (i. e. - 'cert8.db', 'key3.db', and/or 'secmod.db')\n"
	printf "          required by '${pki_silent_script}' exists at the\n"
	printf "          specified location '${pki_silent_security_database_repository}'.\n"
	printf "\n"
	printf "          Please MANUALLY move or erase these security database(s),\n"
	printf "          or specify a different location before re-running this script.\n\n"
	exit 255
fi


## (5) Remove ALL old PKI Silent log files
printf "Removing old PKI Silent log files:\n"
if [ -f ${pki_silent_ra_log} ] ; then
	printf "    Removing old '${pki_silent_ra_log}' . . . "
	rm ${pki_silent_ra_log}
	printf "done.\n"
fi
printf "Done.\n\n"



##############################################################################
##  C A L C U L A T E   P K I   I N S T A N C E   P I N S                   ##
##############################################################################

##  PKI Subsystem Instance PINS
ra_preop_pin=`cat /var/lib/${ra_instance_name}/conf/CS.cfg \
	| grep preop.pin | grep -v grep | awk -F= '{print $2}'`



##############################################################################
##  R E G I S T R A T I O N   A U T H O R I T Y                             ##
##############################################################################
##
##  For example, upon completion,
##  execute '/sbin/service ${ra_init_script} status ${ra_instance_name}':
##
##      ${ra_instance_name} (pid 15769) is running ...
##
##          Unsecure Port              = http://${pki_host}:12888
##          Secure Clientauth Port     = https://${pki_host}:12889
##          Secure Non-Clientauth Port = https://${pki_host}:12890
##

##  Configure RA
printf "'${pki_silent_script}':  Configuring '${ra_instance_name}' . . .\n"
pkisilent ConfigureRA \
	-cs_hostname "${pki_host}" \
	-cs_port ${ra_nonclientauth_port} \
	-cs_clientauth_port ${ra_clientauth_port} \
	-sd_hostname "${pki_security_domain_host}" \
	-sd_ssl_port ${ca_ee_port} \
	-sd_agent_port ${ca_agent_port} \
	-sd_admin_port ${ca_admin_port} \
	-sd_admin_name "${pki_security_domain_admin_name}" \
	-sd_admin_password ${pki_security_domain_admin_password} \
	-ca_hostname ${ra_chosen_ca_hostname} \
	-ca_port ${ra_chosen_ca_nonssl_port} \
	-ca_ssl_port ${ra_chosen_ca_ssl_port} \
	-ca_admin_port ${ra_chosen_ca_admin_port} \
	-client_certdb_dir ${pki_silent_security_database_repository} \
	-client_certdb_pwd ${pki_silent_security_database_password} \
	-preop_pin ${ra_preop_pin} \
	-domain_name "${pki_security_domain_name}" \
	-admin_user ${pki_silent_admin_user} \
	-admin_password ${pki_silent_admin_password} \
	-admin_email "${pki_silent_admin_email}" \
	-agent_name ${ra_agent_name} \
	-key_size ${ra_key_size} \
	-key_type ${ra_key_type} \
	-token_name ${ra_token_name} \
	-token_pwd ${ra_token_password} \
	-agent_key_size ${ra_agent_key_size} \
	-agent_key_type ${ra_agent_key_type} \
	-agent_cert_subject "${ra_agent_cert_subject}" \
	-subsystem_name ${ra_subsystem_name} \
	-ra_server_cert_nickname "${ra_server_cert_nickname}" \
	-ra_server_cert_subject_name "${ra_server_cert_subject_name}" \
	-ra_subsystem_cert_nickname "${ra_subsystem_cert_nickname}" \
	-ra_subsystem_cert_subject_name "${ra_subsystem_cert_subject_name}" \
	| tee ${pki_silent_ra_log}

##  Restart RA
/sbin/service ${ra_init_script} restart ${ra_instance_name}

exit 0

