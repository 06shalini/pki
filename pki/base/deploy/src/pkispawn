#!/usr/bin/python -t
# Authors:
#     Matthew Harmsen <mharmsen@redhat.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Copyright (C) 2011 Red Hat, Inc.
# All rights reserved.
#

# System Imports
import sys
if not hasattr(sys, "hexversion") or sys.hexversion < 0x020700f0:
    print "Python version %s.%s.%s is too old." % sys.version_info[:3]
    print "Please upgrade to at least Python 2.7.0." 
    sys.exit(1)
try:
    import argparse
    import logging
    import os
    import pprint
    from pki.deployment import pkiconfig
    from pki.deployment import pkihelper
    from pki.deployment import pkilogging
    from pki.deployment import pkimessages as log
except ImportError:
    print >> sys.stderr, """\
There was a problem importing one of the required Python modules. The
error was:

    %s
""" % sys.exc_value
    sys.exit(1)


# PKI Deployment Functions
def main(argv):
    "main entry point"

    # Only run this program as "root".
    if not os.geteuid() == 0:
        sys.exit("'%s' must be run as root!" % argv[0])

    # Set the umask
    os.umask(pkiconfig.PKI_DEPLOYMENT_DEFAULT_UMASK)

    # Initialize 'pretty print' for objects
    pp = pprint.PrettyPrinter(indent=4)

    # Read and process command-line arguments.
    pkihelper.process_command_line_arguments(argv)

    # Enable 'pkispawn' logging.
    rv = 0
    if not pkiconfig.pki_update_flag:
        pki_deployment_begin = log.PKISPAWN_BEGIN_MESSAGE_2
        pki_deployment_end = log.PKISPAWN_END_MESSAGE_2
        pkiconfig.pki_log_dir = pkiconfig.pki_root_prefix +\
                                pkiconfig.PKISPAWN_LOG_PATH
        pkiconfig.pki_log_name = pkiconfig.PKISPAWN_LOG_PREFIX +\
                                 pkiconfig.pki_subsystem.lower() +\
                                 pkiconfig.PKISPAWN_LOG_SUFFIX
        rv = pkilogging.enable_pki_logger(pkiconfig.pki_log_dir,
                                          pkiconfig.pki_log_name,
                                          pkiconfig.pki_log_level,
                                          pkiconfig.pki_console_log_level,
                                          pkiconfig.PKISPAWN_LOGGER)
    else:
        pki_deployment_begin = log.PKIRESPAWN_BEGIN_MESSAGE_2
        pki_deployment_end = log.PKIRESPAWN_END_MESSAGE_2
        pkiconfig.pki_log_dir = pkiconfig.pki_root_prefix +\
                                pkiconfig.PKIRESPAWN_LOG_PATH
        pkiconfig.pki_log_name = pkiconfig.PKIRESPAWN_LOG_PREFIX +\
                                 pkiconfig.pki_subsystem.lower() +\
                                 pkiconfig.PKIRESPAWN_LOG_SUFFIX
        rv = pkilogging.enable_pki_logger(pkiconfig.pki_log_dir,
                                          pkiconfig.pki_log_name,
                                          pkiconfig.pki_log_level,
                                          pkiconfig.pki_console_log_level,
                                          pkiconfig.PKIRESPAWN_LOGGER)
    if rv != OSError:
        pkiconfig.pki_log = rv
    else:
        print log.PKI_UNABLE_TO_CREATE_LOG_DIRECTORY_1 % pkiconfig.pki_log_dir
        sys.exit(1)

    # Read the specified PKI configuration file.
    rv = pkihelper.read_pki_configuration_file()
    if rv != 0:
        pkiconfig.pki_log.error(PKI_UNABLE_TO_PARSE_1, rv)
        sys.exit(1)
    else:
        pkiconfig.pki_log.debug(pp.pformat(pkiconfig.pki_common_dict))
        pkiconfig.pki_log.debug(pp.pformat(pkiconfig.pki_web_server_dict))
        pkiconfig.pki_log.debug(pp.pformat(pkiconfig.pki_subsystem_dict))

    # Override PKI configuration file values with 'custom' command-line values.
    if not pkiconfig.pki_instance_name is None:
        pkiconfig.pki_common_dict['pki_instance_name'] =\
            pkiconfig.pki_instance_name
    if not pkiconfig.pki_http_port is None:
        pkiconfig.pki_web_server_dict['pki_http_port'] =\
            pkiconfig.pki_http_port
    if not pkiconfig.pki_https_port is None:
        pkiconfig.pki_web_server_dict['pki_https_port'] =\
            pkiconfig.pki_https_port
    if not pkiconfig.pki_ajp_port is None:
        pkiconfig.pki_web_server_dict['pki_ajp_port'] =\
            pkiconfig.pki_ajp_port
    pkiconfig.pki_log.debug(pp.pformat(pkiconfig.pki_common_dict))
    pkiconfig.pki_log.debug(pp.pformat(pkiconfig.pki_web_server_dict))
    pkiconfig.pki_log.debug(pp.pformat(pkiconfig.pki_subsystem_dict))

    # Install and configure the specified PKI subsystem.
    pki_scriptlets_path = pkiconfig.pki_root_prefix +\
                          pkiconfig.PKISPAWN_PATH +\
                          "/" + pkiconfig.pki_subsystem.lower()
    if not os.path.exists(pki_scriptlets_path) or\
       not os.path.isdir(pki_scriptlets_path):
        pkiconfig.pki_log.error(log.PKI_DIRECTORY_MISSING_OR_NOT_A_DIRECTORY_1,
                                pki_scriptlets_path)
        sys.exit(1)
    pki_subsystem_scriptlets = os.listdir(pki_scriptlets_path)
    pki_subsystem_scriptlets.sort()

    # Process the various "scriptlets" for the specified PKI subsystem.
    rv = 0
    pkiconfig.pki_log.info(pki_deployment_begin,
                           pkiconfig.pki_subsystem,
                           pkiconfig.pki_common_dict['pki_instance_name'])
    for pki_scriptlet in pki_subsystem_scriptlets:
        scriptlet = __import__(pkiconfig.PKI_DEPLOYMENT_SCRIPTLETS_MODULE +\
                               '.' + pki_scriptlet[5:],
                               fromlist = [pki_scriptlet[5:]])
        instance = scriptlet.PkiScriptlet()
        if not pkiconfig.pki_update_flag:
            rv = instance.spawn()
        else:
            rv = instance.respawn()
        if rv != 0:
            sys.exit(1)
    pkiconfig.pki_log.info(pki_deployment_end,
                           pkiconfig.pki_subsystem,
                           pkiconfig.pki_common_dict['pki_instance_name'])
    pkiconfig.pki_log.debug(pp.pformat(pkiconfig.pki_common_dict))
    pkiconfig.pki_log.debug(pp.pformat(pkiconfig.pki_web_server_dict))
    pkiconfig.pki_log.debug(pp.pformat(pkiconfig.pki_subsystem_dict))


# PKI Deployment Entry Point
if __name__ == "__main__":
    main(sys.argv)

